
------------------------------------ 정규 표현식 ----------------------------------------

	//3. 유효성검사 [정규표현식 : 텍스트 패턴 검사]
			
			//정규표현식
			var idj = /^[a-z0-9]{5,12}$/;
			var pwj = /^[A-Za-z0-9]{5,12}$/;
			var phonej = /^01([0|1|6|7|8|9]?)?([0-9]{3,4})?([0-9]{4})$/;
			var namej= /^[가-힣]{3,5}$/;
			//                               - 입력가능       - 입력가능
			var phonej = /^01([0|1|6|7|8|9]?)-?([0-9]{3,4})-?([0-9]{4})$/;
			
			*	/^ :정규표현식 시작
				$/ : 정규표현직 끈
				
			*	[] : 문자 패턴
					[a-z] : 소문자 a-z 까지 가능
					[A-Z] : 대문자 A-Z 까지 가능
					[0-9] : 숫자 모두 가능
					[가-힣] : 한글 모두 가능
				
			*	{최소값,최대값} : 문자 개수
					{최소길이,최대길이} 
					{5 , 12} : 5~15 길이만 가능
				
			*	( ) : 문자 하나로 인식
					01([0|1|6|7|8|9]?) : 중하나
				
			*	와일드 카드
				* : 앞에 문자 없거나 혹은 여러개 존재	
				? : 앞에 문자 있거나 혹은 하나 있음	 [ ? 당 문자 1개 ]
				
------------------------------------ js 1000 단위 표현 ----------------------------------------

document.getElementById("total").innerHTML = totalprice.toString().replace(/\B(?=(\d{3})+(?!\d))/g,',');
										//.innerHTML 속성 태그 [div]
											//총가격.toStirng() : 문자열 변환
												//.replace("기존문자,새로운문자");
													//정규표현식[문자 패턴찾기] /\B(?=(\d{3})+(?!\d))/g
														// 1. /  : 시작
														// 2. \b : 시작, 끝 [예 : 1234일경우 1,4 ] 
														// 3.\d {3} : 숫자 길이 [예 : {3} : 숫자길이 123]
														// 4. !\d : 뒤에 숫자 없을경우
														// 5. /g : 전역 검색
		// java
		DecimalFormat decimalFormat = new DecimalFormat("###,###");
		 return decimalFormat.format(표현 할 값);
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
														

